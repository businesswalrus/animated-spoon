<?php
// Field Service Calculator - Configuration File
// This file contains database connection and common helper functions

// Error reporting (disable in production)
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Database configuration
define('DB_HOST', 'localhost');
define('DB_NAME', 'field_service_calculator');
define('DB_USER', 'root');
define('DB_PASS', '');
define('DB_CHARSET', 'utf8mb4');

// Labor rates (per hour)
define('RATE_REGULAR', 165.00);
define('RATE_TIME_HALF', 247.50);
define('RATE_DOUBLE', 330.00);

// Tax rate
define('TAX_RATE', 0.07);

// Session configuration
ini_set('session.cookie_httponly', 1);
ini_set('session.use_only_cookies', 1);
ini_set('session.cookie_secure', 0); // Set to 1 if using HTTPS
ini_set('session.cookie_samesite', 'Lax');
session_start();

// Database connection function
function getDBConnection() {
    static $pdo = null;
    
    if ($pdo === null) {
        try {
            $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET;
            $options = [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::ATTR_EMULATE_PREPARES => false,
                PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES " . DB_CHARSET
            ];
            
            $pdo = new PDO($dsn, DB_USER, DB_PASS, $options);
        } catch (PDOException $e) {
            // Log error in production, display in development
            error_log("Database connection failed: " . $e->getMessage());
            die("Database connection failed. Please try again later.");
        }
    }
    
    return $pdo;
}

// Security helper functions

// Sanitize input data
function sanitizeInput($data) {
    if (is_array($data)) {
        return array_map('sanitizeInput', $data);
    }
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data, ENT_QUOTES, 'UTF-8');
    return $data;
}

// Check if user is logged in
function isLoggedIn() {
    return isset($_SESSION['user_id']) && isset($_SESSION['username']) && isset($_SESSION['role']);
}

// Require login - redirect to login page if not authenticated
function requireLogin() {
    if (!isLoggedIn()) {
        redirect('login.php');
        exit();
    }
}

// Check if user has required role
function checkRole($requiredRole) {
    if (!isLoggedIn()) {
        return false;
    }
    return $_SESSION['role'] === $requiredRole;
}

// Require specific role - redirect if not authorized
function requireRole($requiredRole) {
    requireLogin();
    if (!checkRole($requiredRole)) {
        $_SESSION['error'] = "Access denied. You don't have permission to view this page.";
        if ($_SESSION['role'] === 'tech') {
            redirect('index.php');
        } else {
            redirect('login.php');
        }
        exit();
    }
}

// Redirect helper
function redirect($url) {
    header("Location: $url");
    exit();
}

// Format currency
function formatCurrency($amount) {
    return '$' . number_format($amount, 2);
}

// Generate CSRF token
function generateCSRFToken() {
    if (!isset($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }
    return $_SESSION['csrf_token'];
}

// Verify CSRF token
function verifyCSRFToken($token) {
    if (!isset($_SESSION['csrf_token']) || !hash_equals($_SESSION['csrf_token'], $token)) {
        return false;
    }
    return true;
}

// Get labor rate based on category
function getLaborRate($category) {
    switch ($category) {
        case 'Regular Time':
            return RATE_REGULAR;
        case 'Time and a Half':
            return RATE_TIME_HALF;
        case 'Double Time':
            return RATE_DOUBLE;
        default:
            return RATE_REGULAR;
    }
}

// Calculate labor charge
function calculateLaborCharge($minutes, $rate) {
    $hours = $minutes / 60;
    return round($hours * $rate, 2);
}

// Calculate total with optional tax
function calculateTotal($materialCost, $laborCharge, $includeTax = false) {
    $subtotal = $materialCost + $laborCharge;
    if ($includeTax) {
        $tax = round($subtotal * TAX_RATE, 2);
        return [
            'subtotal' => $subtotal,
            'tax' => $tax,
            'total' => $subtotal + $tax
        ];
    }
    return [
        'subtotal' => $subtotal,
        'tax' => 0,
        'total' => $subtotal
    ];
}

// Get user by ID
function getUserById($userId) {
    $pdo = getDBConnection();
    $stmt = $pdo->prepare("SELECT id, username, email, role, is_active FROM users WHERE id = ?");
    $stmt->execute([$userId]);
    return $stmt->fetch();
}

// Log user activity (optional - for audit trail)
function logActivity($userId, $action, $details = null) {
    // This could be expanded to log to a separate activity table
    error_log("User $userId performed action: $action" . ($details ? " - $details" : ""));
}

// Set flash message
function setFlashMessage($type, $message) {
    $_SESSION['flash'] = [
        'type' => $type,
        'message' => $message
    ];
}

// Get and clear flash message
function getFlashMessage() {
    if (isset($_SESSION['flash'])) {
        $flash = $_SESSION['flash'];
        unset($_SESSION['flash']);
        return $flash;
    }
    return null;
}

// Display flash message HTML
function displayFlashMessage() {
    $flash = getFlashMessage();
    if ($flash) {
        $class = $flash['type'] === 'success' ? 'alert-success' : 'alert-error';
        echo '<div class="alert ' . $class . '">' . sanitizeInput($flash['message']) . '</div>';
    }
}
?>