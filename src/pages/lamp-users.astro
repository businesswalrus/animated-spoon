---
import MainLayout from '../layouts/MainLayout.astro';

const title = 'Manage Users - Field Service Calculator';
const description = 'User management for Field Service Calculator';
---

<MainLayout title={title} description={description}>
  <!-- Navigation Bar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
      <a class="navbar-brand" href="/lamp-calculator">Field Service Calculator</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#lampNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="lampNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <span class="navbar-text me-3" id="navUsername"></span>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/lamp-calculator">Calculator</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/lamp-admin">Dashboard</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/lamp-users">Manage Users</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#" id="navLogoutBtn">Logout</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>
  
  <div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="h2 mb-0">Manage Users</h1>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
        <i class="bi bi-person-plus"></i> Add User
      </button>
    </div>
    
    
    <div class="card">
      <div class="card-header">
        <h3 class="h5 mb-0">Users</h3>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-striped">
            <thead>
              <tr>
                <th>Username</th>
                <th>Email</th>
                <th>Role</th>
                <th>Status</th>
                <th>Created</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="usersTableBody">
              <!-- Users will be populated here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Add User Modal -->
  <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form id="addUserForm">
          <div class="modal-body">
            <div class="mb-3">
              <label for="newUsername" class="form-label">Username</label>
              <input type="text" class="form-control" id="newUsername" required pattern="[a-zA-Z0-9._@-]+" 
                     title="Username can only contain letters, numbers, dots, underscores, @ and hyphens">
            </div>
            <div class="mb-3">
              <label for="newEmail" class="form-label">Email</label>
              <input type="email" class="form-control" id="newEmail" required>
            </div>
            <div class="mb-3">
              <label for="newPassword" class="form-label">Password</label>
              <input type="password" class="form-control" id="newPassword" required minlength="6">
              <div class="form-text">Minimum 6 characters</div>
            </div>
            <div class="mb-3">
              <label for="newRole" class="form-label">Role</label>
              <select class="form-select" id="newRole" required>
                <option value="tech">Technician</option>
                <option value="admin">Administrator</option>
              </select>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Add User</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <!-- Change Password Modal -->
  <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form id="changePasswordForm">
          <div class="modal-body">
            <input type="hidden" id="changePasswordUsername">
            <p>Changing password for: <strong id="changePasswordUser"></strong></p>
            <div class="mb-3">
              <label for="newPasswordChange" class="form-label">New Password</label>
              <input type="password" class="form-control" id="newPasswordChange" required minlength="6">
              <div class="form-text">Minimum 6 characters</div>
            </div>
            <div class="mb-3">
              <label for="confirmPassword" class="form-label">Confirm Password</label>
              <input type="password" class="form-control" id="confirmPassword" required>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Change Password</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  import { Modal } from 'bootstrap';
  
  // Check authentication
  const userStr = sessionStorage.getItem('lampUser');
  if (!userStr) {
    window.location.href = '/lamp-login';
  }
  
  const user = JSON.parse(userStr || '{}');
  
  // Check if admin
  if (user.role !== 'admin') {
    window.location.href = '/lamp-calculator';
  }
  
  // Update navigation
  const navUsername = document.getElementById('navUsername') as HTMLSpanElement;
  navUsername.textContent = `Welcome, ${user.username}`;
  
  // Logout
  document.getElementById('navLogoutBtn')?.addEventListener('click', (e) => {
    e.preventDefault();
    sessionStorage.removeItem('lampUser');
    window.location.href = '/lamp-login';
  });
  
  // User management
  interface User {
    username: string;
    email: string;
    password: string;
    role: 'admin' | 'tech';
    isActive: boolean;
    createdAt: string;
  }
  
  // Default users
  const defaultUsers: User[] = [
    { username: 'admin', email: 'admin@example.com', password: 'admin123', role: 'admin', isActive: true, createdAt: '2024-01-01T00:00:00Z' },
    { username: 'tech1', email: 'tech1@example.com', password: 'tech123', role: 'tech', isActive: true, createdAt: '2024-01-01T00:00:00Z' },
    { username: 'tech2', email: 'tech2@example.com', password: 'tech123', role: 'tech', isActive: true, createdAt: '2024-01-01T00:00:00Z' },
    { username: 'sales@tech.com', email: 'sales@tech.com', password: 'jackson1', role: 'tech', isActive: true, createdAt: '2024-01-01T00:00:00Z' }
  ];
  
  // Load users from localStorage or use defaults
  let users: User[] = JSON.parse(localStorage.getItem('lampUsers') || JSON.stringify(defaultUsers));
  
  // Save users to localStorage
  function saveUsers() {
    localStorage.setItem('lampUsers', JSON.stringify(users));
    // Update the valid credentials in the login page
    const validCredentials = users.filter(u => u.isActive).map(u => ({
      username: u.username,
      password: u.password,
      role: u.role
    }));
    localStorage.setItem('lampValidCredentials', JSON.stringify(validCredentials));
  }
  
  // Render users table
  function renderUsersTable() {
    const tbody = document.getElementById('usersTableBody') as HTMLTableSectionElement;
    tbody.innerHTML = users.map(u => `
      <tr>
        <td>${u.username}</td>
        <td>${u.email}</td>
        <td><span class="badge bg-${u.role === 'admin' ? 'primary' : 'info'}">${u.role === 'admin' ? 'Admin' : 'Tech'}</span></td>
        <td>
          <span class="badge bg-${u.isActive ? 'success' : 'danger'}">${u.isActive ? 'Active' : 'Inactive'}</span>
        </td>
        <td>${new Date(u.createdAt).toLocaleDateString()}</td>
        <td>
          ${u.username === 'admin' && u.username === user.username ? 
            '<span class="text-muted">Cannot modify self</span>' :
            `
              <div class="btn-group btn-group-sm" role="group">
                <button class="btn btn-warning" onclick="showChangePassword('${u.username}')">
                  <i class="bi bi-key"></i> Password
                </button>
                <button class="btn btn-${u.isActive ? 'secondary' : 'success'}" onclick="toggleUserStatus('${u.username}')">
                  ${u.isActive ? '<i class="bi bi-pause"></i> Deactivate' : '<i class="bi bi-play"></i> Activate'}
                </button>
                ${u.username !== 'admin' ? `
                  <button class="btn btn-danger" onclick="deleteUser('${u.username}')">
                    <i class="bi bi-trash"></i> Delete
                  </button>
                ` : ''}
              </div>
            `
          }
        </td>
      </tr>
    `).join('');
  }
  
  // Show change password modal
  window.showChangePassword = function(username: string) {
    const modal = new Modal(document.getElementById('changePasswordModal')!);
    document.getElementById('changePasswordUsername')!.setAttribute('value', username);
    document.getElementById('changePasswordUser')!.textContent = username;
    modal.show();
  };
  
  // Toggle user status
  window.toggleUserStatus = function(username: string) {
    const user = users.find(u => u.username === username);
    if (user) {
      user.isActive = !user.isActive;
      saveUsers();
      renderUsersTable();
      showAlert(`User ${username} has been ${user.isActive ? 'activated' : 'deactivated'}.`, 'success');
    }
  };
  
  // Delete user
  window.deleteUser = function(username: string) {
    if (confirm(`Are you sure you want to delete user ${username}?`)) {
      users = users.filter(u => u.username !== username);
      saveUsers();
      renderUsersTable();
      showAlert(`User ${username} has been deleted.`, 'success');
    }
  };
  
  // Show alert
  function showAlert(message: string, type: 'success' | 'danger' = 'success') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.container')!.insertBefore(alertDiv, document.querySelector('.card')!);
    
    setTimeout(() => alertDiv.remove(), 5000);
  }
  
  // Add user form submission
  document.getElementById('addUserForm')?.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const username = (document.getElementById('newUsername') as HTMLInputElement).value;
    const email = (document.getElementById('newEmail') as HTMLInputElement).value;
    const password = (document.getElementById('newPassword') as HTMLInputElement).value;
    const role = (document.getElementById('newRole') as HTMLSelectElement).value as 'admin' | 'tech';
    
    // Check if username already exists
    if (users.some(u => u.username === username)) {
      showAlert('Username already exists!', 'danger');
      return;
    }
    
    // Check if email already exists
    if (users.some(u => u.email === email)) {
      showAlert('Email already exists!', 'danger');
      return;
    }
    
    // Add new user
    users.push({
      username,
      email,
      password,
      role,
      isActive: true,
      createdAt: new Date().toISOString()
    });
    
    saveUsers();
    renderUsersTable();
    
    // Close modal and reset form
    Modal.getInstance(document.getElementById('addUserModal')!)?.hide();
    (e.target as HTMLFormElement).reset();
    
    showAlert(`User ${username} has been created successfully!`, 'success');
  });
  
  // Change password form submission
  document.getElementById('changePasswordForm')?.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const username = document.getElementById('changePasswordUsername')!.getAttribute('value')!;
    const newPassword = (document.getElementById('newPasswordChange') as HTMLInputElement).value;
    const confirmPassword = (document.getElementById('confirmPassword') as HTMLInputElement).value;
    
    if (newPassword !== confirmPassword) {
      showAlert('Passwords do not match!', 'danger');
      return;
    }
    
    const user = users.find(u => u.username === username);
    if (user) {
      user.password = newPassword;
      saveUsers();
      
      // Close modal and reset form
      Modal.getInstance(document.getElementById('changePasswordModal')!)?.hide();
      (e.target as HTMLFormElement).reset();
      
      showAlert(`Password for ${username} has been changed successfully!`, 'success');
    }
  });
  
  // Initial render
  renderUsersTable();
</script>