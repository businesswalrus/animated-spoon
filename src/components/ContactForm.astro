---
// /components/ContactForm.astro
interface Props {
  prefilledState?: string;
}

const { prefilledState } = Astro.props;

// List of all 50 US states
const states = [
  "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware",
  "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
  "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi",
  "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico",
  "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania",
  "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont",
  "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"
];
---
<form id="contactForm">
  <div class="row g-3">
    <div class="col-md-6">
      <label for="name" class="form-label">Name *</label>
      <input type="text" class="form-control" id="name" name="name" required>
    </div>
    <div class="col-md-6">
      <label for="email" class="form-label">Email *</label>
      <input type="email" class="form-control" id="email" name="email" required>
    </div>
    <div class="col-md-6">
      <label for="phone" class="form-label">Phone (optional)</label>
      <input type="tel" class="form-control" id="phone" name="phone">
    </div>
    <div class="col-md-6">
      <label for="state" class="form-label">State *</label>
      <select class="form-select" id="state" name="state" required>
        <option value="">Select your state...</option>
        {states.map((state) => (
          <option value={state} selected={prefilledState === state}>
            {state}
          </option>
        ))}
      </select>
    </div>
    <div class="col-12">
      <label for="message" class="form-label">Message *</label>
      <textarea class="form-control" id="message" name="message" rows="5" required></textarea>
    </div>
    <div class="col-12 text-center mt-4">
      <button type="submit" class="btn btn-danger btn-lg px-5">Send Message</button>
    </div>
  </div>
</form>

<!-- Success Alert -->
<div id="successAlert" class="alert alert-success mt-4 d-none">
  <i class="fas fa-check-circle me-2"></i> Thank you! Your message has been sent.
</div>

<!-- Error Alert -->
<div id="errorAlert" class="alert alert-danger mt-4 d-none">
  <i class="fas fa-exclamation-circle me-2"></i> <span id="errorText">Something went wrong. Please try again.</span>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('contactForm');
  // Google Apps Script webhook URL
  const WEBHOOK_URL = 'https://script.google.com/macros/s/AKfycbyjj1VqHKID7Q-0vBB56zjqZViJ-OLENEKcnRdji66o9pkFLN6-jYK-3Gy6Vofr4ZHXVg/exec';
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Validate email
    const email = form.email.value;
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      alert('Please enter a valid email address');
      return;
    }
    
    // Collect form data
    const formData = {
      name: form.name.value,
      email: email,
      phone: form.phone.value || '',
      state: form.state.value,
      message: form.message.value
    };
    
    try {
      // POST to Google Apps Script
      const response = await fetch(WEBHOOK_URL, {
        method: 'POST',
        mode: 'no-cors', // Google Apps Script doesn't support CORS
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      // Store for thank you page personalization
      sessionStorage.setItem('contactFormData', JSON.stringify({
        name: formData.name,
        email: formData.email
      }));
      
      // Redirect to thank you page
      window.location.href = '/thank-you';
    } catch (error) {
      alert('Unable to send message. Please try again.');
    }
  });
});
</script>
